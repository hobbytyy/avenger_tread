name: Build Windows Executable

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build-windows:
    runs-on: windows-latest  # 在Windows环境中运行
    
    steps:
    # 第一步：检出代码
    - uses: actions/checkout@v3
      name: Checkout code
      # 这个步骤会将您的代码从GitHub仓库检出到工作环境
    
    # 第二步：设置Python环境
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        # 在Windows环境中安装Python 3.9
        
    # 第三步：安装依赖
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
      # 升级pip，安装项目依赖，安装PyInstaller
        
    # 第四步：构建可执行文件
    - name: Build executable
      run: |
        python build_windows.py
      # 运行我们之前创建的Windows打包脚本
        
    # 第五步：创建zip压缩包
    - name: Create release zip
      run: |
        Compress-Archive -Path dist/* -DestinationPath quant-backtest-windows.zip
      # 将dist目录中的所有文件压缩成zip包
        
    # 第六步：上传构建产物
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: windows-executable
        path: quant-backtest-windows.zip
        # 将zip包作为构建产物上传，可以在Actions页面下载
        
    # 第七步：创建GitHub Release（仅在推送到main分支时）
    - name: Create Release
      if: github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: windows-v${{ github.run_number }}
        release_name: Windows Release ${{ github.run_number }}
        draft: false
        prerelease: false
        # 创建一个新的Release版本
        
    # 第八步：上传Release资源（仅在推送到main分支时）
    - name: Upload Release Asset
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: quant-backtest-windows.zip
        asset_name: quant-backtest-windows.zip
        asset_content_type: application/zip
        # 将zip包上传为Release的资源文件